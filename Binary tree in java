package tree;
import java.util.*;

public class binarytree {
	private class Node{
		Node left;                      //creating node
		Node right;
		int data;
		public Node(int data) {
			this.data=data;
			this.left=null;
			this.right=null;
		}
	}
	
	
	
	private Node root;
	public  void createTree(){
		root=new Node(1);
		Node second=new Node(2);
		Node third=new Node(3);         //assigning values to tree
		Node fourth=new Node(4);
		Node fifth=new Node(5);
		
		root.left=second;
		root.right=third;
		second.left=fourth;
		second.right=fifth;
	}
	
	
	
	
	public void preOrderRecursive(Node root) {
		if(root==null) {
			return;
		}
		System.out.print(root.data+" ");     //pre order recursive
		preOrderRecursive(root.left);
		preOrderRecursive(root.right);
	}
	
	
	public void preOrderIterative(Node root) {

		if(root==null) {
			return;
		}
		Stack<Node>s=new Stack<>();
		s.push(root);
		while(!s.isEmpty()) {
			Node temp=s.pop();            //pre order iterative
			System.out.print(temp.data);
			if(temp.right!=null) {
				s.push(temp.right);
			}
			if(temp.left!=null) {
				s.push(temp.left);
			}
		}
		
	}
	
	
	
	public void inOrder(Node root) {
		if(root==null) {
			return;                     //in order recursive
		}
		inOrder(root.left);
		System.out.print(root.data+" ");
		inOrder(root.right);
	}
	
	
	
	public void inOrderIterative(Node root) {
		if(root==null) {
			return;
		}
		Stack<Node>s=new Stack<>();
		Node temp=root;
		while(!s.isEmpty()||temp!=null) {              //in order iterative
			if(temp!=null) {
				s.push(temp);
				temp=temp.left;
			}
			else {
				temp=s.pop();
				System.out.print(temp.data+" ");
				temp=temp.right;
			}
			
		}
	}
	
	
	
	public void postOrder(Node root) {
		if(root==null) {
			return;                           //post order
		}
		postOrder(root.left);
		
		postOrder(root.right);
		System.out.print(root.data+" ");
	}  
	
	
	
	
	public void LevOrder(Node root) {
		if(root==null) {
			return;
		}
		Queue<Node>q=new LinkedList<>();
		q.offer(root);
		while(!q.isEmpty()) {                     //levelorder
			Node temp=q.poll();
			System.out.print(temp.data+" ");
			if(temp.left!=null) {
				q.offer(temp.left);
			}
			if(temp.right!=null) {
				q.offer(temp.right);
			}
			}
	}
	public static void main(String args[]) {
		binarytree bt=new binarytree();
	bt.createTree();
	bt.preOrderRecursive(bt.root);
	//bt.inOrder(bt.root);
	System.out.println();
		bt.inOrderIterative(bt.root);
		System.out.println();
		bt.postOrder(bt.root);
		System.out.println();
		bt.LevOrder(bt.root);
	}

}
